generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String
  imageUrl String
  email String

  servers Server[]
  members Member[]
  channel Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Server {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String
  inviteCode String

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
   id String  @id @default(auto()) @map("_id") @db.ObjectId
   name String
   type ChannelType @default(TEXT)

  profileId String 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)


   serverId String
  server Server @relation(fields: [profileId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  
    @@index([profileId])
  @@index([serverId])
}